<UserControl x:Class="HavenSoft.HexManiac.WPF.Controls.TabView"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:hsv="clr-namespace:HavenSoft.HexManiac.WPF.Resources"
      xmlns:hsg3hvmtr="clr-namespace:HavenSoft.HexManiac.Core.ViewModels.Tools;assembly=HexManiac.Core"
      xmlns:hsg3hw="clr-namespace:HavenSoft.HexManiac.WPF.Windows"
      xmlns:hsg3hv="clr-namespace:HavenSoft.HexManiac.WPF.Controls"
      PreviewMouseDown="ClearPopup"
      DataContextChanged="HandleDataContextChanged">
   <UserControl.Resources>
      <BooleanToVisibilityConverter x:Key="BoolToVisibility" />
      <hsg3hv:IntegerToHexConverter x:Key="Hex"/>
   </UserControl.Resources>
   <DockPanel>
      <!-- Bottom Bar -->
      <Grid DockPanel.Dock="Bottom">
         <DockPanel LastChildFill="False">
            <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
               <TextBlock Text="Free Space:"/>
               <TextBox Text="{Binding FreeSpaceStart, Converter={StaticResource Hex}}" Width="70"/>
            </StackPanel>
            <TextBlock DockPanel.Dock="Left" Text="{Binding SelectedAddress}" MouseRightButtonUp="AddressShowMenu" Margin="10,0,0,0"/>
            <Grid HorizontalAlignment="Right" DockPanel.Dock="Right">
               <TextBlock Margin="10,0,0,0" Text="{Binding SelectedBytes}" MouseRightButtonUp="BytesShowMenu"/>
            </Grid>
         </DockPanel>
         <Rectangle Visibility="{Binding UpdateInProgress, Converter={StaticResource BoolToVisibility}}">
            <Rectangle.Fill>
               <LinearGradientBrush>
                  <GradientStop Offset="0" Color="{DynamicResource Stream2Color}"/>
                  <GradientStop Offset="{Binding Progress}" Color="{DynamicResource Stream2Color}"/>
                  <GradientStop Offset="{Binding Progress}" Color="Transparent"/>
                  <GradientStop Offset="1" Color="Transparent"/>
               </LinearGradientBrush>
            </Rectangle.Fill>
         </Rectangle>
      </Grid>
      <!-- Tool Headers -->
      <StackPanel DockPanel.Dock="Left" Visibility="{Binding HasTools, Converter={StaticResource BoolToVisibility}}">
         <StackPanel.Resources>
            <RotateTransform x:Key="Sideways" Angle="-90"/>
         </StackPanel.Resources>
         <Button Content="Table" Command="{Binding Tools.TableToolCommand}" Margin="0,2" LayoutTransform="{StaticResource Sideways}">
            <Button.Style>
               <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding Tools.SelectedIndex}" Value="0">
                        <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </Button.Style>
         </Button>
         <Button Content="Text" Command="{Binding Tools.StringToolCommand}" Margin="0,2" LayoutTransform="{StaticResource Sideways}">
            <Button.Style>
               <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding Tools.SelectedIndex}" Value="1">
                        <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </Button.Style>
         </Button>
         <Button Content="Image" Command="{Binding Tools.SpriteToolCommand}" Margin="0,2" LayoutTransform="{StaticResource Sideways}">
            <Button.Style>
               <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding Tools.SelectedIndex}" Value="2">
                        <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </Button.Style>
         </Button>
         <Button Content="Code" Command="{Binding Tools.CodeToolCommand}" Margin="0,2" LayoutTransform="{StaticResource Sideways}">
            <Button.Style>
               <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding Tools.SelectedIndex}" Value="3">
                        <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </Button.Style>
         </Button>
      </StackPanel>
      <!-- Tools -->
      <Grid DockPanel.Dock="Left" DataContext="{Binding Tools}" Width="275">
         <Grid.Style>
            <Style TargetType="Grid">
               <Style.Triggers>
                  <DataTrigger Binding="{Binding SelectedIndex}" Value="-1">
                     <Setter Property="Visibility" Value="Collapsed"/>
                  </DataTrigger>
               </Style.Triggers>
            </Style>
         </Grid.Style>
         <Popup Name="CodeContentsPopup" StaysOpen="False">
            <Border BorderBrush="{DynamicResource Accent}" BorderThickness="1" Background="{DynamicResource Background}">
               <StackPanel Width="300">
                  <StackPanel Orientation="Horizontal">
                     <TextBlock Name="CodeContentsPopupKeywordText" FontFamily="Consolas" FontWeight="Bold" Foreground="{DynamicResource Accent}"/>
                     <TextBlock Name="CodeContentsPopupArgsText" FontFamily="Consolas"/>
                  </StackPanel>
                  <TextBlock Name="CodeContentsPopupDocumentationText" FontFamily="Consolas" TextWrapping="Wrap" FontStyle="Italic" Foreground="{DynamicResource Secondary}"/>
               </StackPanel>
            </Border>
         </Popup>
         <DockPanel Name="TableToolPanel">
            <DockPanel.Style>
               <Style TargetType="DockPanel">
                  <Setter Property="Visibility" Value="Collapsed"/>
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding SelectedIndex}" Value="0">
                        <Setter Property="Visibility" Value="Visible"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </DockPanel.Style>
            <ComboBox Name="TableSelector" ItemsSource="{Binding TableTool.TableList}" DropDownClosed="TableSelected" SelectedIndex="{Binding TableTool.SelectedTableIndex}" HorizontalAlignment="Center" MaxWidth="200" DockPanel.Dock="Top"/>
            <Viewbox HorizontalAlignment="Center" Margin="0,2" DockPanel.Dock="Top" StretchDirection="DownOnly">
               <TextBlock Text="{Binding TableTool.CurrentElementName}" TextAlignment="Center" />
            </Viewbox>
            <Grid DockPanel.Dock="Top">
               <Button Margin="5" Content="Previous" Command="{Binding TableTool.Previous}" HorizontalAlignment="Left"/>
               <Button Margin="5" Content="Next" Command="{Binding TableTool.Next}" HorizontalAlignment="Right"/>
               <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="5">
                  <Border ToolTipService.InitialShowDelay="0">
                     <Border.ToolTip>
                        <ToolTip Background="{DynamicResource Backlight}" BorderBrush="{DynamicResource Accent}" BorderThickness="1">
                           <TextBlock TextAlignment="Left">
                              Select the last element of the table <LineBreak/>
                              and press this to extend the table.
                           </TextBlock>
                        </ToolTip>
                     </Border.ToolTip>
                     <Button Command="{Binding TableTool.Append}">
                        <Button.Content>
                           <StackPanel Orientation="Horizontal">
                              <TextBlock Text="Add" Margin="0,0,2,0"/>
                              <TextBox Text="{Binding TableTool.AddCount, UpdateSourceTrigger=PropertyChanged}" BorderThickness="0"/>
                              <TextBlock Text="New" Margin="2,0,0,0"/>
                           </StackPanel>
                        </Button.Content>
                     </Button>
                  </Border>
                  <StackPanel>
                     <RepeatButton Height="12" Width="12" Padding="1" Command="{Binding TableTool.IncrementAdd}">
                        <Path Data="{hsv:Icon ThinPlus}" Fill="{DynamicResource Secondary}" Stretch="Uniform"/>
                     </RepeatButton>
                     <RepeatButton Height="12" Width="12" Padding="1" Command="{Binding TableTool.DecrementAdd}">
                        <Path Data="{hsv:Icon ThinMinus}" Fill="{DynamicResource Secondary}" Stretch="Uniform"/>
                     </RepeatButton>
                  </StackPanel>
               </StackPanel>
            </Grid>
            <ScrollViewer VerticalScrollBarVisibility="Visible">
               <ItemsControl ItemsSource="{Binding TableTool.Children}" Grid.IsSharedSizeScope="True">
                  <ItemsControl.Resources>
                     <DataTemplate DataType="{x:Type hsg3hvmtr:SplitterArrayElementViewModel}">
                        <DockPanel Name="ContainerPanel" Background="Transparent">
                           <DockPanel.Style>
                              <Style TargetType="DockPanel">
                                 <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                       <Setter Property="Tag" Value="Magic"/>
                                    </Trigger>
                                 </Style.Triggers>
                              </Style>
                           </DockPanel.Style>
                           <DockPanel.ContextMenu>
                              <ContextMenu>
                                 <MenuItem Header="Expand All" Command="{Binding ExpandAll}"/>
                                 <MenuItem Header="Collapse All" Command="{Binding CollapseAll}"/>
                              </ContextMenu>
                           </DockPanel.ContextMenu>
                           <Button DockPanel.Dock="Right" Command="{Binding FollowLink}" Width="20" Height="20">
                              <Button.ToolTip>
                                 <ToolTip Background="{DynamicResource Backlight}" BorderBrush="{DynamicResource Accent}" BorderThickness="1">
                                    <TextBlock TextAlignment="Left">
                                       Jump to the table<LineBreak/>
                                       containing this data.
                                    </TextBlock>
                                 </ToolTip>
                              </Button.ToolTip>
                              <Path Data="{hsv:Icon RightArrow}" Fill="{DynamicResource Secondary}" Stretch="Uniform"/>
                           </Button>
                           <Expander VerticalAlignment="Center" IsExpanded="{Binding Visible}" LayoutTransform="0,1,-1,0,0,0" Tag="{Binding Tag, ElementName=ContainerPanel}"/>
                           <Viewbox StretchDirection="DownOnly" Margin="5">
                              <TextBlock Text="{Binding SectionName}" FontSize="20">
                                 <TextBlock.InputBindings>
                                    <MouseBinding MouseAction="LeftClick" Command="{Binding ToggleVisibility}"/>
                                    <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding ToggleVisibility}"/>
                                 </TextBlock.InputBindings>
                              </TextBlock>
                           </Viewbox>
                        </DockPanel>
                     </DataTemplate>
                     <DataTemplate DataType="{x:Type hsg3hvmtr:FieldArrayElementViewModel}">
                        <Grid HorizontalAlignment="Stretch" Margin="2" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                           <Grid.ColumnDefinitions>
                              <ColumnDefinition Width="Auto" SharedSizeGroup="LeftColumn"/>
                              <ColumnDefinition Width="*"/>
                           </Grid.ColumnDefinitions>
                           <TextBlock Text="{Binding Name}" Margin="5,0" Grid.Column="0"/>
                           <TextBox UndoLimit="0" Text="{Binding Content, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1"/>
                        </Grid>
                     </DataTemplate>
                     <DataTemplate DataType="{x:Type hsg3hvmtr:ComboBoxArrayElementViewModel}">
                        <Grid HorizontalAlignment="Stretch" Margin="2" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                           <Grid.ColumnDefinitions>
                              <ColumnDefinition Width="Auto" SharedSizeGroup="LeftColumn"/>
                              <ColumnDefinition Width="*"/>
                              <ColumnDefinition Width="Auto"/>
                           </Grid.ColumnDefinitions>
                           <TextBlock Text="{Binding Name}" Margin="5,0" Grid.Column="0"/>
                           <ComboBox SelectedIndex="{Binding SelectedIndex}" ItemsSource="{Binding Options}" Margin="0,0,2,0" Grid.Column="1">
                              <ComboBox.ItemTemplate>
                                 <DataTemplate>
                                    <StackPanel>
                                       <TextBlock Text="{Binding Text}" Visibility="{Binding DisplayAsText, Converter={StaticResource BoolToVisibility}}"/>
                                       <hsg3hv:PixelImage x:Name="OptionImage">
                                          <hsg3hv:PixelImage.Style>
                                             <Style TargetType="hsg3hv:PixelImage">
                                                <Style.Triggers>
                                                   <DataTrigger Binding="{Binding DisplayAsText}" Value="True">
                                                      <Setter Property="Visibility" Value="Collapsed"/>
                                                   </DataTrigger>
                                                </Style.Triggers>
                                             </Style>
                                          </hsg3hv:PixelImage.Style>
                                       </hsg3hv:PixelImage>
                                    </StackPanel>
                                 </DataTemplate>
                              </ComboBox.ItemTemplate>
                           </ComboBox>
                           <Button Grid.Column="2" Command="{Binding GotoSource}" Width="20" Height="20">
                              <Button.ToolTip>
                                 <ToolTip Background="{DynamicResource Backlight}" BorderBrush="{DynamicResource Accent}" BorderThickness="1">
                                    <TextBlock TextAlignment="Left">
                                       Jump to the table used as<LineBreak/>
                                       a source for the options.
                                    </TextBlock>
                                 </ToolTip>
                              </Button.ToolTip>
                              <Path Data="{hsv:Icon RightArrow}" Fill="{DynamicResource Secondary}" Stretch="Uniform"/>
                           </Button>
                        </Grid>
                     </DataTemplate>
                     <DataTemplate DataType="{x:Type hsg3hvmtr:BitListArrayElementViewModel}">
                        <StackPanel Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                           <Grid HorizontalAlignment="Stretch" Margin="2">
                              <Grid.ColumnDefinitions>
                                 <ColumnDefinition Width="Auto" SharedSizeGroup="LeftColumn"/>
                                 <ColumnDefinition Width="*"/>
                              </Grid.ColumnDefinitions>
                              <TextBlock Text="{Binding Name}" Margin="5,0" Grid.Column="0"/>
                              <Button Grid.Column="1" HorizontalAlignment="Right" Command="{Binding LinkCommand}" Width="20" Height="20">
                                 <Button.ToolTip>
                                    <ToolTip Background="{DynamicResource Backlight}" BorderBrush="{DynamicResource Accent}" BorderThickness="1">
                                       <TextBlock TextAlignment="Left">
                                          Jump to the table used as<LineBreak/>
                                          a source for the options.
                                       </TextBlock>
                                    </ToolTip>
                                 </Button.ToolTip>
                                 <Path Data="{hsv:Icon RightArrow}" Fill="{DynamicResource Secondary}" Stretch="Uniform"/>
                              </Button>
                           </Grid>
                           <ItemsControl ItemsSource="{Binding}">
                              <ItemsControl.ItemsPanel>
                                 <ItemsPanelTemplate>
                                    <WrapPanel/>
                                 </ItemsPanelTemplate>
                              </ItemsControl.ItemsPanel>
                              <ItemsControl.ItemTemplate>
                                 <DataTemplate>
                                    <CheckBox Margin="5,1,0,1" Width="115" IsChecked="{Binding IsChecked}" Content="{Binding BitLabel}"/>
                                 </DataTemplate>
                              </ItemsControl.ItemTemplate>
                           </ItemsControl>
                        </StackPanel>
                     </DataTemplate>
                     <DataTemplate DataType="{x:Type hsg3hvmtr:StreamElementViewModel}">
                        <StackPanel Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                           <hsg3hv:CommonTableStreamControl />
                           <TextBox UndoLimit="0" Text="{Binding Content, UpdateSourceTrigger=PropertyChanged}" Margin="20,2,2,2" AcceptsReturn="True"
                              Visibility="{Binding ShowContent, Converter={StaticResource BoolToVisibility}}">
                              <TextBox.InputBindings>
                                 <KeyBinding Modifiers="Ctrl" Key="Z" Command="{Binding Undo}"/>
                                 <KeyBinding Modifiers="Ctrl" Key="Y" Command="{Binding Redo}"/>
                              </TextBox.InputBindings>
                           </TextBox>
                        </StackPanel>
                     </DataTemplate>
                     <DataTemplate DataType="{x:Type hsg3hvmtr:ButtonArrayElementViewModel}">
                        <Button HorizontalAlignment="Center" Content="{Binding Text}" Margin="5" Command="{Binding Command}" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}"/>
                     </DataTemplate>
                     <DataTemplate DataType="{x:Type hsg3hvmtr:SpriteElementViewModel}">
                        <StackPanel Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                           <hsg3hv:CommonTableStreamControl />
                           <hsg3hv:PixelImage SnapsToDevicePixels="True" />
                           <DockPanel Visibility="{Binding ShowPageControls, Converter={StaticResource BoolToVisibility}}">
                              <Button Content="Previous" Command="{Binding PreviousPage}" DockPanel.Dock="Left"/>
                              <Button Content="+" Command="{Binding AddPage}" DockPanel.Dock="Right" ToolTip="Add a new page to this sprite and palette"/>
                              <Button Content="Next" Command="{Binding NextPage}" DockPanel.Dock="Right"/>
                              <Button Content="-" Command="{Binding DeletePage}" HorizontalAlignment="Center" ToolTip="Delete the current page of this sprite and palette"/>
                           </DockPanel>
                        </StackPanel>
                     </DataTemplate>
                     <DataTemplate DataType="{x:Type hsg3hvmtr:PaletteElementViewModel}">
                        <StackPanel PreviewMouseDown="ActivatePalette"  Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                           <hsg3hv:CommonTableStreamControl />
                           <hsg3hv:PaletteControl DataContext="{Binding Colors}" />
                           <DockPanel Visibility="{Binding ShowPageControls, Converter={StaticResource BoolToVisibility}}">
                              <Button Content="Previous" Command="{Binding PreviousPage}" DockPanel.Dock="Left"/>
                              <Button Content="+" Command="{Binding AddPage}" DockPanel.Dock="Right" ToolTip="Add a new page to this sprite and palette"/>
                              <Button Content="Next" Command="{Binding NextPage}" DockPanel.Dock="Right"/>
                              <Button Content="-" Command="{Binding DeletePage}" HorizontalAlignment="Center" ToolTip="Delete the current page of this sprite and palette"/>
                           </DockPanel>
                        </StackPanel>
                     </DataTemplate>
                  </ItemsControl.Resources>
               </ItemsControl>
            </ScrollViewer>
         </DockPanel>
         <DockPanel Name="StringToolPanel">
            <DockPanel.Style>
               <Style TargetType="DockPanel">
                  <Setter Property="Visibility" Value="Collapsed"/>
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding SelectedIndex}" Value="1">
                        <Setter Property="Visibility" Value="Visible"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </DockPanel.Style>
            <TextBlock Text="Address:" Margin="5,15,0,0" DockPanel.Dock="Top"/>
            <TextBox Text="{Binding StringTool.Address, Converter={StaticResource Hex}, UpdateSourceTrigger=PropertyChanged}" Margin="5" DockPanel.Dock="Top"/>
            <TextBlock DockPanel.Dock="Top" Text="{Binding StringTool.Message}" HorizontalAlignment="Center" TextWrapping="Wrap" Visibility="{Binding StringTool.ShowMessage, Converter={StaticResource BoolToVisibility}}"/>
            <Button Margin="0,3" Command="{Binding StringTool.CheckIsText}" Content="Show As Text" HorizontalAlignment="Right" DockPanel.Dock="Top" Visibility="{Binding StringTool.ShowMessage, Converter={StaticResource BoolToVisibility}}"/>
            <Button Command="{Binding StringTool.InsertText}" Content="Insert New Text" HorizontalAlignment="Right" DockPanel.Dock="Top" Visibility="{Binding StringTool.ShowMessage, Converter={StaticResource BoolToVisibility}}"/>
            <TextBlock Text="Content:" Margin="5,30,0,0" DockPanel.Dock="Top"/>

            <Button Command="{Binding StringTool.Search}" Margin="5,0" Content="Search" HorizontalAlignment="Right" DockPanel.Dock="Bottom" />
            <TextBox Margin="5,0" FontFamily="Consolas" Text="{Binding StringTool.SearchText, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding StringTool.Enabled}" DockPanel.Dock="Bottom">
               <TextBox.InputBindings>
                  <KeyBinding Key="Return" Command="{Binding StringTool.Search}"/>
                  <KeyBinding Key="F3" Command="{Binding StringTool.Search}"/>
               </TextBox.InputBindings>
            </TextBox>
            <TextBlock Text="Search:" Margin="5,0" DockPanel.Dock="Bottom"/>

            <Grid Margin="5,5" MinHeight="50">
               <TextBox Name="StringToolTextBox" AcceptsReturn="True" TextWrapping="Wrap" FontFamily="Consolas" VerticalScrollBarVisibility="Auto" UndoLimit="0"
                  SelectionChanged="StringToolContentSelectionChanged"
                  LostFocus="ShowManualSelection"
                  GotFocus="HideManualSelection"
                  ScrollViewer.ScrollChanged="UpdateManualSelectionFromScroll"
                  IsEnabled="{Binding StringTool.Enabled}"
                  Text="{Binding StringTool.Content, UpdateSourceTrigger=PropertyChanged}" />
               <Rectangle Name="ManualHighlight" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="14" Fill="{DynamicResource Accent}" Opacity=".4"/>
            </Grid>
         </DockPanel>
         <ScrollViewer Name="ImageToolPanel" VerticalScrollBarVisibility="Visible">
            <ScrollViewer.Style>
               <Style TargetType="ScrollViewer">
                  <Setter Property="Visibility" Value="Collapsed"/>
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding SelectedIndex}" Value="2">
                        <Setter Property="Visibility" Value="Visible"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </ScrollViewer.Style>
            <StackPanel>
               <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                  <Button Content="Import" Command="{Binding SpriteTool.ImportPair}" CommandParameter="{DynamicResource FileSystem}" Margin="5"/>
                  <Button Content="Export" Command="{Binding SpriteTool.ExportPair}" CommandParameter="{DynamicResource FileSystem}" Margin="5"/>
               </StackPanel>
               <!-- Sprite Address -->
               <UniformGrid Columns="2" Margin="5,15,5,1">
                  <TextBlock VerticalAlignment="Center" Text="Image Address:" />
                  <TextBox Text="{Binding SpriteTool.SpriteAddress, Converter={StaticResource Hex}, UpdateSourceTrigger=PropertyChanged}" Margin="5">
                     <TextBox.InputBindings>
                        <KeyBinding Key="Return" Command="{Binding SpriteTool.GotoSpriteAddress}" />
                     </TextBox.InputBindings>
                  </TextBox>
               </UniformGrid>

               <!-- Sprite Properties -->
               <StackPanel Visibility="{Binding SpriteTool.ShowSpriteProperties, Converter={StaticResource BoolToVisibility}}">
                  <UniformGrid Columns="2">
                     <CheckBox Margin="5,1" Content="256 Color Image" IsChecked="{Binding SpriteTool.SpriteIs256Color}" />
                     <CheckBox Margin="5,1" Content="Tilemap" IsChecked="{Binding SpriteTool.SpriteIsTilemap}" />
                  </UniformGrid>
                  <UniformGrid Columns="2" Margin="5,1">
                     <TextBlock VerticalAlignment="Center" Text="Tile Size:" />
                     <TextBox Text="{Binding SpriteTool.SpriteWidthHeight, UpdateSourceTrigger=PropertyChanged}" Margin="5"/>
                  </UniformGrid>
                  <DockPanel Margin="5,1">
                     <TextBlock Width="75" VerticalAlignment="Center">
                        <TextBlock.Style>
                           <Style TargetType="TextBlock">
                              <Setter Property="Text" Value="Palette Name:"/>
                              <Style.Triggers>
                                 <DataTrigger Binding="{Binding SpriteTool.SpriteIsTilemap}" Value="True">
                                    <Setter Property="Text" Value="Tileset Name:"/>
                                 </DataTrigger>
                              </Style.Triggers>
                           </Style>
                        </TextBlock.Style>
                     </TextBlock>
                     <TextBox Text="{Binding SpriteTool.SpritePaletteHint, UpdateSourceTrigger=PropertyChanged}" Margin="5"/>
                  </DockPanel>
               </StackPanel>
               <TextBlock Margin="5,1" TextWrapping="Wrap" FontStyle="Italic" Foreground="{DynamicResource Error}" Text="Could not find sprite data starting at that address." Visibility="{Binding SpriteTool.ShowNoSpriteAnchorMessage, Converter={StaticResource BoolToVisibility}}"/>

               <!-- Sprite -->
               <hsg3hv:PixelImage Margin="0,5,0,2" DataContext="{Binding SpriteTool}" />
               <DockPanel Visibility="{Binding SpriteTool.HasMultipleSpritePages, Converter={StaticResource BoolToVisibility}}" LastChildFill="False">
                  <Button Content="Previous" Command="{Binding SpriteTool.PreviousSpritePage}" DockPanel.Dock="Left"/>
                  <Button Content="Next" Command="{Binding SpriteTool.NextSpritePage}" DockPanel.Dock="Right"/>
               </DockPanel>

               <!-- Palette Address -->
               <UniformGrid Columns="2" Margin="5,15,5,1">
                  <TextBlock VerticalAlignment="Center" Text="Palette Address:" />
                  <TextBox Text="{Binding SpriteTool.PaletteAddress, Converter={StaticResource Hex}, UpdateSourceTrigger=PropertyChanged}" Margin="5">
                     <TextBox.InputBindings>
                        <KeyBinding Key="Return" Command="{Binding SpriteTool.GotoPaletteAddress}" />
                     </TextBox.InputBindings>
                  </TextBox>
               </UniformGrid>

               <!-- Palette Properties -->
               <StackPanel Visibility="{Binding SpriteTool.ShowPaletteProperties, Converter={StaticResource BoolToVisibility}}">
                  <CheckBox Margin="5,1" Content="256 Color Palette" IsChecked="{Binding SpriteTool.PaletteIs256Color}"/>
                  <UniformGrid Columns="2" Margin="5,1">
                     <TextBlock VerticalAlignment="Center" Text="Pages:" />
                     <TextBox Text="{Binding SpriteTool.PalettePages, UpdateSourceTrigger=PropertyChanged}" Margin="5"/>
                  </UniformGrid>
               </StackPanel>
               <TextBlock Margin="5,1" TextWrapping="Wrap" FontStyle="Italic" Foreground="{DynamicResource Error}" Text="Could not find palette data starting at that address." Visibility="{Binding SpriteTool.ShowNoPaletteAnchorMessage, Converter={StaticResource BoolToVisibility}}"/>

               <!-- Palette -->
               <hsg3hv:PaletteControl DataContext="{Binding SpriteTool.Colors}" />
               <DockPanel Visibility="{Binding SpriteTool.HasMultiplePalettePages, Converter={StaticResource BoolToVisibility}}" LastChildFill="False">
                  <Button Content="Previous" Command="{Binding SpriteTool.PreviousPalettePage}" DockPanel.Dock="Left"/>
                  <Button Content="Next" Command="{Binding SpriteTool.NextPalettePage}" DockPanel.Dock="Right"/>
               </DockPanel>
            </StackPanel>
         </ScrollViewer>
         <DockPanel Name="CodeToolPanel">
            <DockPanel.Style>
               <Style TargetType="DockPanel">
                  <Setter Property="Visibility" Value="Collapsed"/>
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding SelectedIndex}" Value="3">
                        <Setter Property="Visibility" Value="Visible"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </DockPanel.Style>
            <Grid HorizontalAlignment="Stretch" Margin="2" DockPanel.Dock="Top">
               <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" SharedSizeGroup="LeftColumn"/>
                  <ColumnDefinition Width="*"/>
               </Grid.ColumnDefinitions>
               <TextBlock Text="Code Type" Margin="5,0" Grid.Column="0"/>
               <ComboBox Grid.Column="1" Name="CodeModeSelector" SelectedItem="{Binding CodeTool.Mode}"/>
            </Grid>
            <Grid Name="CodeToolBody">
               <TextBox UndoLimit="0" Margin="5" FontFamily="Consolas" Visibility="{Binding CodeTool.UseSingleContent, Converter={StaticResource BoolToVisibility}}"
                        Text="{Binding CodeTool.Content, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="{Binding CodeTool.IsReadOnly}" AcceptsReturn="True" VerticalScrollBarVisibility="Auto"/>
               <DockPanel Visibility="{Binding CodeTool.UseMultiContent, Converter={StaticResource BoolToVisibility}}">
                  <TextBlock Foreground="{DynamicResource Error}" DockPanel.Dock="Bottom" TextWrapping="Wrap"
                     Text="{Binding CodeTool.ErrorText}"  Visibility="{Binding CodeTool.ShowErrorText, Converter={StaticResource BoolToVisibility}}" />
                  <ScrollViewer PreviewMouseWheel="ScrollCodeContent">
                     <ItemsControl ItemsSource="{Binding CodeTool.Contents}">
                        <ItemsControl.ItemTemplate>
                           <DataTemplate>
                              <StackPanel>
                                 <TextBlock Text="{Binding Label}" Margin="2,0"/>
                                 <Grid Margin="5">
                                    <TextBox  Text="{Binding Content, UpdateSourceTrigger=PropertyChanged}" UndoLimit="0"
                                          AcceptsReturn="True" FontFamily="Consolas" SelectionChanged="CodeToolContentsSelectionChanged"/>
                                    <TextBlock Visibility="{Binding IsOpen, ElementName=CodeContentsPopup, Converter={StaticResource BoolToVisibility}}"
                                          HorizontalAlignment="Left" VerticalAlignment="Top" IsHitTestVisible="False" FontFamily="Consolas" FontWeight="Bold"/>
                                 </Grid>
                              </StackPanel>
                           </DataTemplate>
                        </ItemsControl.ItemTemplate>
                     </ItemsControl>
                  </ScrollViewer>
               </DockPanel>
            </Grid>
         </DockPanel>
      </Grid>
      <!-- Anchor Editor -->
      <Border DockPanel.Dock="Top" Height="19" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource Backlight}">
         <Grid>
            <DockPanel Visibility="{Binding AnchorTextVisible, Converter={StaticResource BoolToVisibility}}" >
               <TextBlock Width="70" Text="Anchor: " TextAlignment="Right" ToolTipService.ShowDuration="15000">
                  <TextBlock.ToolTip>
                     <ToolTip>
                        <TextBlock TextAlignment="Left">
                           <Bold>Anchor Editor</Bold> <LineBreak/>
                           Anchors can have a name and a format. <LineBreak/>
                           <LineBreak/>
                           Named anchors persist between sessions. <LineBreak/>
                           You can also use names in pointers and with Goto <Italic Foreground="{DynamicResource Secondary}">(Ctrl+G)</Italic>. <LineBreak/>
                           <LineBreak/>
                           Formats change how the data is displayed and edited. <LineBreak/>
                           For example, "" formats data as text. <LineBreak/>
                           To learn more about formats, visit the Wiki.
                        </TextBlock>
                     </ToolTip>
                  </TextBlock.ToolTip>
               </TextBlock>
               <TextBox UndoLimit="0" Text="{Binding AnchorText, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,25,0"/>
            </DockPanel>
            <Expander VerticalAlignment="Center" HorizontalAlignment="Left" ExpandDirection="Right" Visibility="{Binding ShowWidthProperties, Converter={StaticResource BoolToVisibility}}">
               <Expander.Resources>
                  <Style TargetType="Path">
                     <Setter Property="Fill" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}}"/>
                     <Setter Property="Stretch" Value="Uniform"/>
                  </Style>
                  <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
                     <Setter Property="Width" Value="30"/>
                  </Style>
               </Expander.Resources>
               <Expander.Header>
                  <TextBlock Foreground="{DynamicResource Secondary}" Text="Row Width:"/>
               </Expander.Header>
               <StackPanel Orientation="Horizontal">
                  <TextBox Text="{Binding PreferredWidth, UpdateSourceTrigger=PropertyChanged}" Width="30" HorizontalContentAlignment="Right" Margin="5,0"/>
                  <ToggleButton IsChecked="{Binding StretchData}" ToolTip="Stretch Cells to fill available space.">
                     <ToggleButton.Content>
                        <Path Data="{hsv:Icon ArrowsLeftRight}"/>
                     </ToggleButton.Content>
                  </ToggleButton>
                  <ToggleButton IsChecked="{Binding AutoAdjustDataWidth}" VerticalContentAlignment="Center" ToolTip="Adjust Width after Goto">
                     <ToggleButton.Content>
                        <TextBlock Text="Auto" VerticalAlignment="Bottom" Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}}"/>
                     </ToggleButton.Content>
                  </ToggleButton>
                  <ToggleButton IsChecked="{Binding AllowMultipleElementsPerLine}" ToolTip="Allow Multiple Rows per Line.">
                     <ToggleButton.Content>
                        <Path Data="{hsv:Icon MultiList}"/>
                     </ToggleButton.Content>
                  </ToggleButton>
               </StackPanel>
            </Expander>
         </Grid>
      </Border>
      <!-- Column Headers -->
      <hsg3hv:HorizontalSlantedTextControl DockPanel.Dock="Top"
         FontSize="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=ZoomLevel}"
         HeaderRows="{Binding ColumnHeaders}"
         ColumnWidth="{Binding CellWidth, ElementName=HexContent}"
         HorizontalOffset="{Binding ElementName=HexContent, Path=HorizontalScrollValue}"/>
      <!-- Row Headers -->
      <Grid DockPanel.Dock="Left" ClipToBounds="True" Background="{DynamicResource Backlight}" MouseDown="HeaderMouseDown" Name="HeaderRenderAreaContainer">
         <Grid Name="HeaderRenderArea">
            <Grid Name="ScrollingHeader" RenderTransform="{Binding RenderTransform, ElementName=ScrollingHexContent}">
               <Rectangle Name="OldHeader" RenderTransform="{Binding RenderTransform, ElementName=OldContent}">
                  <Rectangle.Fill>
                     <ImageBrush x:Name="OldHeaderBrush"/>
                  </Rectangle.Fill>
               </Rectangle>
               <ItemsControl Width="70" ItemsSource="{Binding Headers}" Background="{DynamicResource Backlight}">
                  <ItemsControl.ItemTemplate>
                     <DataTemplate>
                        <Viewbox Height="{Binding CellHeight, ElementName=HexContent}" HorizontalAlignment="Right" Margin="0,0,2,0">
                           <TextBlock Foreground="{DynamicResource Secondary}" Text="{Binding}" FontFamily="Consolas" Padding="1"/>
                        </Viewbox>
                     </DataTemplate>
                  </ItemsControl.ItemTemplate>
               </ItemsControl>
            </Grid>
         </Grid>
      </Grid>

      <Line Width="1" DockPanel.Dock="Left" Stroke="{DynamicResource Background}"/>
      <ScrollBar DockPanel.Dock="Right"
         Minimum="{Binding MinimumScroll}" Maximum="{Binding MaximumScroll}" Value="{Binding ScrollValue}"
         SmallChange="1" LargeChange="{Binding Height}" />
      <ScrollBar DockPanel.Dock="Bottom" Orientation="Horizontal" SmallChange="10" LargeChange="{Binding CellWidth, ElementName=HexContent}"
         Minimum="0" Maximum="{Binding HorizontalScrollMaximum, ElementName=HexContent}" Value="{Binding HorizontalScrollValue, ElementName=HexContent}"
         Visibility="{Binding ShowHorizontalScroll, ElementName=HexContent, Converter={StaticResource BoolToVisibility}}" />
      <Grid Margin=".5,.5,0,0" ClipToBounds="True" Name="HexContentRenderAreaContainer">
         <Grid Name="HexContentRenderArea">
            <Grid Name="ScrollingHexContent">
               <Grid.RenderTransform>
                  <TranslateTransform/>
               </Grid.RenderTransform>
               <Rectangle Name="OldContent">
                  <Rectangle.Fill>
                     <ImageBrush x:Name="OldContentBrush"/>
                  </Rectangle.Fill>
                  <Rectangle.RenderTransform>
                     <TranslateTransform/>
                  </Rectangle.RenderTransform>
               </Rectangle>
               <hsg3hv:HexContent x:Name="HexContent" GotFocus="ShowCursor" LostFocus="HideCursor" ViewPort="{Binding}" FontSize="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=ZoomLevel}"  ShowGrid="{Binding DataContext.ShowMatrix, RelativeSource={RelativeSource AncestorType=hsg3hw:MainWindow}}" CursorNeedsUpdate="UpdateBlinkyCursor"/>
               <Rectangle Width="1" Fill="{DynamicResource Secondary}" Visibility="Collapsed" IsHitTestVisible="False" Name="BlinkyCursor" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            </Grid>
         </Grid>
      </Grid>
   </DockPanel>
</UserControl>
