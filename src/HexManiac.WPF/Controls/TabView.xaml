<UserControl x:Class="HavenSoft.HexManiac.WPF.Controls.TabView"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:hsg3hvmtr="clr-namespace:HavenSoft.HexManiac.Core.ViewModels.Tools;assembly=HexManiac.Core"
      xmlns:hsg3ww="clr-namespace:HavenSoft.HexManiac.WPF.Windows"
      xmlns:hsg3hv="clr-namespace:HavenSoft.HexManiac.WPF.Controls">
   <UserControl.Resources>
      <BooleanToVisibilityConverter x:Key="BoolToVisibility" />
      <hsg3hv:IntegerToHexConverter x:Key="Hex"/>
   </UserControl.Resources>
   <DockPanel>
      <!-- Bottom Bar -->
      <TextBlock DockPanel.Dock="Bottom" Text="{Binding SelectedAddress}" MouseRightButtonUp="AddressShowMenu"/>
      <!-- Tool Headers -->
      <StackPanel DockPanel.Dock="Left" Visibility="{Binding HasTools, Converter={StaticResource BoolToVisibility}}">
         <Button Content="Text" Command="{Binding Tools.StringToolCommand}" Margin="0,2">
            <Button.LayoutTransform>
               <RotateTransform Angle="-90"/>
            </Button.LayoutTransform>
            <Button.Style>
               <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding Tools.SelectedIndex}" Value="0">
                        <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </Button.Style>
         </Button>
         <Button Content="Table" Command="{Binding Tools.TableToolCommand}" Margin="0,2">
            <Button.LayoutTransform>
               <RotateTransform Angle="-90"/>
            </Button.LayoutTransform>
            <Button.Style>
               <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding Tools.SelectedIndex}" Value="1">
                        <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </Button.Style>
         </Button>
         <Button Content="Tool3" Command="{Binding Tools.Tool3Command}" Margin="0,2">
            <Button.LayoutTransform>
               <RotateTransform Angle="-90"/>
            </Button.LayoutTransform>
            <Button.Style>
               <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding Tools.SelectedIndex}" Value="2">
                        <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </Button.Style>
         </Button>
      </StackPanel>
      <!-- Tools -->
      <Grid DockPanel.Dock="Left" DataContext="{Binding Tools}">
         <Grid.Style>
            <Style TargetType="Grid">
               <Style.Triggers>
                  <DataTrigger Binding="{Binding SelectedIndex}" Value="-1">
                     <Setter Property="Visibility" Value="Collapsed"/>
                  </DataTrigger>
               </Style.Triggers>
            </Style>
         </Grid.Style>
         <DockPanel Name="StringToolPanel">
            <DockPanel.Style>
               <Style TargetType="DockPanel">
                  <Setter Property="Visibility" Value="Collapsed"/>
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding SelectedIndex}" Value="0">
                        <Setter Property="Visibility" Value="Visible"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </DockPanel.Style>
            <TextBlock Text="Address:" Margin="5,15,0,0" DockPanel.Dock="Top"/>
            <TextBox Text="{Binding StringTool.Address, Converter={StaticResource Hex}, UpdateSourceTrigger=PropertyChanged}" Margin="5" DockPanel.Dock="Top"/>
            <TextBlock DockPanel.Dock="Top" Text="{Binding StringTool.Message}" Width="255" HorizontalAlignment="Center" TextWrapping="Wrap" Visibility="{Binding StringTool.ShowMessage, Converter={StaticResource BoolToVisibility}}"/>
            <Button Margin="0,3" Command="{Binding StringTool.CheckIsText}" Content="Show As Text" HorizontalAlignment="Right" DockPanel.Dock="Top" Visibility="{Binding StringTool.ShowMessage, Converter={StaticResource BoolToVisibility}}"/>
            <Button Command="{Binding StringTool.InsertText}" Content="Insert New Text" HorizontalAlignment="Right" DockPanel.Dock="Top" Visibility="{Binding StringTool.ShowMessage, Converter={StaticResource BoolToVisibility}}"/>
            <TextBlock Text="Content:" Margin="5,30,0,0" DockPanel.Dock="Top"/>
            <TextBox Margin="5,5" AcceptsReturn="True" MinHeight="50" Width="255" TextWrapping="Wrap" FontFamily="Consolas" VerticalScrollBarVisibility="Auto"
               SelectionChanged="StringToolContentSelectionChanged"
               IsEnabled="{Binding StringTool.Enabled}"
               Text="{Binding StringTool.Content, UpdateSourceTrigger=PropertyChanged}" />
         </DockPanel>
         <ScrollViewer Width="265" Name="TableToolPanel" VerticalScrollBarVisibility="Visible">
            <ScrollViewer.Style>
               <Style TargetType="ScrollViewer">
                  <Setter Property="Visibility" Value="Collapsed"/>
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding SelectedIndex}" Value="1">
                        <Setter Property="Visibility" Value="Visible"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </ScrollViewer.Style>
            <StackPanel>
               <TextBlock Text="{Binding TableTool.CurrentElementName}" HorizontalAlignment="Center" Margin="0,2" MaxWidth="200" TextWrapping="Wrap" TextAlignment="Center"/>
               <Grid>
                  <Button Margin="5" Content="Previous" Command="{Binding TableTool.Previous}" HorizontalAlignment="Left"/>
                  <Button Margin="5" Content="Next" Command="{Binding TableTool.Next}" HorizontalAlignment="Right"/>
               </Grid>
               <Button Margin="5" Content="Append" Command="{Binding TableTool.Append}" HorizontalAlignment="Right"/>
               <ItemsControl ItemsSource="{Binding TableTool.Children}" Grid.IsSharedSizeScope="True">
                  <ItemsControl.Resources>
                     <DataTemplate DataType="{x:Type hsg3hvmtr:FieldArrayElementViewModel}">
                        <Grid HorizontalAlignment="Stretch" Margin="2">
                           <Grid.ColumnDefinitions>
                              <ColumnDefinition Width="Auto" SharedSizeGroup="LeftColumn"/>
                              <ColumnDefinition Width="*"/>
                           </Grid.ColumnDefinitions>
                           <TextBlock Text="{Binding Name}" Margin="5,0" Grid.Column="0"/>
                           <TextBox Text="{Binding Content, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1"/>
                        </Grid>
                     </DataTemplate>
                     <DataTemplate DataType="{x:Type hsg3hvmtr:ComboBoxArrayElementViewModel}">
                        <Grid HorizontalAlignment="Stretch" Margin="2">
                           <Grid.ColumnDefinitions>
                              <ColumnDefinition Width="Auto" SharedSizeGroup="LeftColumn"/>
                              <ColumnDefinition Width="*"/>
                           </Grid.ColumnDefinitions>
                           <TextBlock Text="{Binding Name}" Margin="5,0" Grid.Column="0"/>
                           <ComboBox SelectedIndex="{Binding SelectedIndex}" ItemsSource="{Binding Options}" Grid.Column="1"/>
                        </Grid>
                     </DataTemplate>
                     <DataTemplate DataType="{x:Type hsg3hvmtr:TextStreamArrayElementViewModel}">
                        <TextBox Text="{Binding Content, UpdateSourceTrigger=PropertyChanged}" Margin="20,2,2,2" AcceptsReturn="True"/>
                     </DataTemplate>
                  </ItemsControl.Resources>
               </ItemsControl>
            </StackPanel>
         </ScrollViewer>
         <StackPanel Name="Tool3Panel">
            <StackPanel.Style>
               <Style TargetType="StackPanel">
                  <Setter Property="Visibility" Value="Collapsed"/>
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding SelectedIndex}" Value="2">
                        <Setter Property="Visibility" Value="Visible"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </StackPanel.Style>
            <TextBlock Text="Coming Soon!" Margin="5,15,0,0"/>
         </StackPanel>
      </Grid>
      <!-- Anchor Editor -->
      <Border DockPanel.Dock="Top" Height="19" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource Backlight}">
         <DockPanel Visibility="{Binding AnchorTextVisible, Converter={StaticResource BoolToVisibility}}" >
            <TextBlock Width="70" Text="Anchor: " TextAlignment="Right" ToolTipService.ShowDuration="15000">
               <TextBlock.ToolTip>
                  <ToolTip Background="{DynamicResource Backlight}" BorderBrush="{DynamicResource Accent}" BorderThickness="1">
                     <TextBlock TextAlignment="Left">
                        <Bold>Anchor Editor</Bold> <LineBreak/>
                        Anchors can have a name and a format. <LineBreak/>
                        <LineBreak/>
                        Named anchors persist between sessions. <LineBreak/>
                        You can also use names in pointers and with Goto <Italic Foreground="{DynamicResource Secondary}">(Ctrl+G)</Italic>. <LineBreak/>
                        <LineBreak/>
                        Formats change how the data is displayed and edited. <LineBreak/>
                        For example, "" formats data as text. <LineBreak/>
                        To learn more about formats, visit the Wiki.
                     </TextBlock>
                  </ToolTip>
               </TextBlock.ToolTip>
            </TextBlock>
            <TextBox Text="{Binding AnchorText, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,25,0"/>
         </DockPanel>
      </Border>
      <!-- Column Headers -->
      <hsg3hv:HorizontalSlantedTextControl DockPanel.Dock="Top" HeaderRows="{Binding ColumnHeaders}" ColumnWidth="{x:Static hsg3hv:HexContent.CellWidth}" HorizontalOffset="{Binding ElementName=HexContent, Path=HorizontalScrollValue}"/>
      <!-- Row Headers -->
      <ItemsControl DockPanel.Dock="Left" Width="70" ItemsSource="{Binding Headers}" Background="{DynamicResource Backlight}" MouseDown="HeaderMouseDown">
         <ItemsControl.ItemTemplate>
            <DataTemplate>
               <Viewbox Height="{x:Static hsg3hv:HexContent.CellHeight}" HorizontalAlignment="Right" Margin="0,0,2,0">
                  <TextBlock Foreground="{DynamicResource Secondary}" Text="{Binding}" FontFamily="Consolas" Padding="1"/>
               </Viewbox>
            </DataTemplate>
         </ItemsControl.ItemTemplate>
      </ItemsControl>
      <Line Width="1" DockPanel.Dock="Left" Stroke="{DynamicResource Background}"/>
      <ScrollBar DockPanel.Dock="Right"
         Minimum="{Binding MinimumScroll}" Maximum="{Binding MaximumScroll}" Value="{Binding ScrollValue}"
         SmallChange="1" LargeChange="{Binding Height}" />
      <ScrollBar DockPanel.Dock="Bottom" Orientation="Horizontal" SmallChange="10" LargeChange="{x:Static hsg3hv:HexContent.CellWidth}"
         Minimum="0" Maximum="{Binding HorizontalScrollMaximum, ElementName=HexContent}" Value="{Binding HorizontalScrollValue, ElementName=HexContent}"
         Visibility="{Binding ShowHorizontalScroll, ElementName=HexContent, Converter={StaticResource BoolToVisibility}}" />
      <hsg3hv:HexContent x:Name="HexContent" ViewPort="{Binding}" ShowGrid="{Binding DataContext.ShowMatrix, RelativeSource={RelativeSource AncestorType=hsg3ww:MainWindow}}" Margin=".5,.5,0,0"/>
   </DockPanel>
</UserControl>
